{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","todo","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","onClick","completed","class","Component","NewTodoForm","handleSubmit","newTodo","uuid","addTodo","htmlFor","placeholder","TodoList","todos","add","remove","update","toggleCompleted","filter","updatedTodo","updatedTodos","map","t","item","key","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5a4813a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Todo.css'\n\nexport default class Todo extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isEditing: false,\n            todo: this.props.todo\n        }\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n    \n    handleRemove() {\n        this.props.removeTodo(this.props.id);\n    }\n    toggleForm() {\n        this.setState({ isEditing: !this.state.isEditing })\n    }\n    handleUpdate(evt) {\n        evt.preventDefault();\n        // take new todo data and pass up to parent\n        this.props.updateTodo(this.props.id, this.state.todo)\n        this.setState({ isEditing: false });\n    }\n    handleChange(evt) {\n        this.setState({ [evt.target.name]: [evt.target.value] });\n    }\n    handleToggle(evt) {\n        this.props.toggleTodo(this.props.id);\n    }\n\n    render() {\n        let result;\n\n        if(this.state.isEditing) {\n            result = (\n                <div className=\"Todo\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input \n                        type=\"text\" \n                        name=\"todo\" \n                        value={this.state.todo}\n                        onChange={this.handleChange}\n                        />\n                        <button>Save</button>\n                    </form>\n                </div>\n            )\n        } else {\n            result =(\n                <div className=\"Todo\">\n                    <li \n                    onClick={this.handleToggle}\n                    className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}>{this.props.todo}\n                    </li>\n                    <div className=\"Todo-buttons\">\n                        <button onClick={this.toggleForm}>\n                            <i class='fas fa-pen' />\n                        </button>\n                        <button onClick={this.handleRemove}>\n                            <i class='fas fa-trash' />    \n                        </button>\n                    </div>\n                </div>\n            )\n        }\n        return result;\n    }\n}\n","import React, { Component } from 'react'\nimport uuid from 'uuid/v4'\nimport './NewTodoForm.css'\n\nexport default class NewTodoForm extends Component {\n                 constructor(props) {\n                   super(props);\n\n                   this.state = {\n                     todo: \"\"\n                   };\n                   this.handleChange = this.handleChange.bind(this);\n                   this.handleSubmit = this.handleSubmit.bind(this);\n                 }\n\n                 handleChange(evt) {\n                    this.setState({ [evt.target.name]: [evt.target.value] });\n                 }\n                 handleSubmit(evt) {\n                    evt.preventDefault()\n\n                    // the todo function goes here\n                    const newTodo = {...this.state, id: uuid(), completed: false}\n                    this.props.addTodo(newTodo)\n                    // reset state\n                    this.setState({\n                        todo: \"\"\n                    })\n                 }\n\n                 render() {\n                   return (\n                     <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                       <label htmlFor=\"todo\">New Todo</label>\n                       <input\n                         type=\"text\"\n                         placeholder=\"New Todo\"\n                         name=\"todo\"\n                         id=\"todo\"\n                         value={this.state.todo}\n                         onChange={this.handleChange}\n                       />\n                       <button>ADD TODO</button>\n                     </form>\n                   );\n                 }\n               }\n","import React, { Component } from 'react'\nimport Todo from './Todo'\nimport NewTodoForm from \"./NewTodoForm\";\nimport './TodoList.css'\n\nexport default class TodoList extends Component {\n                 constructor(props) {\n                   super(props);\n\n                   this.state = {\n                     todos: []\n                   };\n                   this.add = this.add.bind(this);\n                   this.remove = this.remove.bind(this);\n                   this.update = this.update.bind(this);\n                   this.toggleCompleted = this.toggleCompleted.bind(this);\n                 }\n\n                 add(newTodo) {\n                   this.setState({\n                     todos: [...this.state.todos, newTodo]\n                   });\n                 }\n\n                 remove(id) {\n                    this.setState({\n                        todos: this.state.todos.filter(todo => todo.id !== id)\n                    })\n                 }\n                 update(id, updatedTodo) {\n                    const updatedTodos = this.state.todos.map(t => {\n                      if(t.id === id) {\n                        return { ...t, todo: updatedTodo }\n                      }\n                      return t;\n                    });\n                    this.setState({ todos: updatedTodos })\n                 }\n                 toggleCompleted(id){\n                   const updatedTodos = this.state.todos.map(t => {\n                     if (t.id === id) {\n                       return { ...t, completed: !t.completed }\n                     }\n                     return t;\n                   });\n                   this.setState({ todos: updatedTodos })\n                 }\n\n                 render() {\n                   // render method\n                   const todos = this.state.todos.map(item => (\n                     <Todo\n                       todo={item.todo}\n                       id={item.id}\n                       key={item.id}\n                       completed={item.completed}\n                       removeTodo={this.remove}\n                       updateTodo={this.update}\n                       toggleTodo={this.toggleCompleted}\n                     />\n                   ));\n                   console.log(this.state.todos);\n                   return (\n                     <div className='TodoList'>\n                       <h1>Todo List<span>A React Todo List App</span></h1>\n                      <ul>{todos}</ul>\n                       <NewTodoForm addTodo={this.add} />\n                     </div>\n                   );\n                 }\n               }\n","import React from 'react';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}